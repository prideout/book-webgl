Four types of sections:
Exposition
Interaction Recipes
Rendering Recipes
Application Recipes

------------

Vector Algebra with Javascript
The Canvas Element
The Life of a Triangle
Vertex Buffer Objects
Vertex Attributes
Typed Arrays
XMLHttpRequest
Textures
Shader Toy
Framebuffer Objects

\rrecipe{ColorGraph}{Animated wireframe graph of the sinc function}
%                   demonstrates performance gains with javascript vs glsl
%                   demonstrates interleaved data and Typed Arrays (colors + uv)
\irecipe{Trackball}{ Classic mouse-driven rotation } % With momentum and quats!
\irecipe{SelectionBuffer}
\irecipe{PointSelection}{ Voronoi maps for point-cloud selection }
           %  Modifies depth like a nailboard according to squared distance
           %  Writes out gl$_VertexID
\irecipe{ViewCube}{ Move the camera by clicking on a mini-cube with hotspots }
\irecipe{QuadManips} { Render "manipulators" to allow users to orient a quad in 3-space }
\arecipe{BlockPuzzle}
\arecipe{HouseModeler}
\arecipe{FunctionGrapher}{Implicit (FS) or parametric (VS)}
Rendering Recipe:   BlendShapes - morphs between two wireframe shapes
Rendering Recipe:   BoneSystem  - bends the antennae and arms in a humanoid wireframe
Rendering Recipe:   ParametricSurface
Rendering Recipe:   VisualizeDepth - 
Rendering Recipe:   BasicLighting -
Rendering Recipe:   CelEffect - 
Rendering Recipe:   Silhouette - 
Rendering Recipe:   EasyReflection -
Rendering Recipe:   CompositeSolid - Slicing and capping
Rendering Recipe:   StencilPaths - Using the stencil buffer to draw concave paths
Rendering Recipe:   DeferredRendering -
Rendering Recipe:   SSAO - 
	\recipe{PixelNurbs}{Rendering NURB curves in the fragment shader} % ala GPU Pro article
          % http://www.mdk.org.pl/2007/10/27/curvy-blues
          % http://www.mdk.org.pl/2007/8/6/vector-drawing-opengl-shaders-and-cairo
          % http://www.mdk.org.pl/2007/8/16/vector-drawing-opengl-polygon-tessellation
	\recipe{VisualizeDepth}{ Finding min/max Z and normalizing to grayscale}
	\recipe{DepthComplexity}{ Visualizing depth complexity} % amends VisualizeDepth using hue for depth complexity
	\recipe{DeferredShading}{Introducing the G Buffer}
	  % http://visual-computing.intel-research.net/art/publications/deferred_rendering/
	  % http://www.gamerendering.com/2008/11/01/deferred-lightning/
          % Note that Crytek says they use "deferred lighting" in their engine

    % references stencil shadows and vector rendering
    % Explains how blending can often be used for some of the same tricks
	\recipe{EasyReflection}{Easy planar reflection}
	\recipe{CompositeSolid}{Slicing and capping}

	\recipe{BumpMapping}{Art-provided normal maps} % external references: procedural bumping
	\recipe{CubemapReflection}{Classic, simple use of cubemaps} % no refraction because of the FresnelGlass shader
	\recipe{RenderCubemap}{Rendering a scene from all six vantage points}
	\recipe{ProceduralNoise}{}
	\recipe{PointSprites}{Fireworks with source-over and additive blending}
 	\recipe{BlendPrograms}{Ping-pong buffers for programmable blending}
	\recipe{Uberlight}{Spotlights with procedural shapes}
	\recipe{ProjectiveTexturing}{Spotlights and artist-provided light shapes}
	\recipe{AnisotropicLighting}{Satin and brushed metal}
	\recipe{GaussianBlur}{Optimal filtering with minimal taps} % Be sure to cover NV_texture_barrier, possibly as a separate recipe
	\recipe{Bloom}{Blurring high intensities in HDR images}
	\recipe{MorphologicalAntialiasing}{Screen-space smoothing} % GPU Pro
           % Practical MLAA on a GPU: http://igm.univ-mlv.fr/~biri/mlaa-gpu/ (nice paper by Venceslas Biri)
	\recipe{BlobShadows}{}
	\recipe{ShadowVolumes}{Also known as ``stencil shadows''}
	\recipe{ShadowMaps}{Old-school PCF shadow mapping} % Uses PCF to soften edges
	\recipe{SoftShadows}{Penumbrae via anisotropic blur in screen-space} % as seen in "GPU Pro 2".
	\recipe{ParallaxMapping}{Bumpy silhouettes}
	\recipe{FresnelGlass}{Using floating point textures to measure thickness} % see my buddha article
	\recipe{SubsurfaceScattering}{Realistic marble} % external references to blurring techniques -- should I use thickness here too?
    \recipe{NiceFog}{High-quality fog} % http://iquilezles.org/www/articles/fog/fog.htm
    \recipe{MotionBlur}{Emphasizing movement with directional blur} % Also refer to the SIGGRAPH 2010 geometric motion blur
    \recipe{DistanceBlur}{Depth of field via post-processing} % Real-time Depth-of-Field (ShaderX 5) -- there also seem to be some dx11 demos for this (ATI's ladybug)
      % Layered DOF, Gather-based DOF, Diffusion DOF
      % good survey: http://developer.download.nvidia.com/presentations/2010/futuregameon/LouisBavoil_ModernRealTimeRenderingTechniques.pdf
    \recipe{JitterFocus}{Depth of field via accumulation}

    \recipe{Lightmaps}{Specular/Diffuse/AO maps with multitexturing} % nvidia-mesh-tools can help with this (and xNormal)
    \recipe{ReflectiveShadowmap}{Introducing the G Buffer} % AKA RSM, Instant Radiosity, Luminance Splatting [Keller 97]
    \recipe{AmbientOcclusion}{Screen-space ambient occlusion}
    \recipe{LightBaker}{Reverse texture mapping; conservative rasterization}
    %
    % SSAO state of the art:
    % http://cdn.bitbucket.org/simonwallner/ogre-ssao-sample/downloads/documentation.pdf
    % The above paper seems to conclude hemisphere is best
    %
    % Might want to replace this with McGuire's Ambient Occlusion Volumes
    % SSDM http://visual-computing.intel-research.net/art/publications/sdsm/
    %
    % hemicube rendering http://the-witness.net/news/?p=244 and http://freespace.virgin.net/hugo.elias/radiosity/radiosity.htm
    % HBAO horizon-based ambient occlusion, analytical ambient occlusion: http://www.slideshare.net/DICEStudio/bending-the-graphics-pipeline
    % Normal-Free HBAO (low-quality, as seen in DX10 SDK SSAO sample and Bad Company 2)
    % Temporal Filtering can speed it up (Soler et al 2010, Herzog et al 2010)
    % http://www.gamerendering.com/category/lighting/ssao-lighting/
    % Sphere AO: http://www.iquilezles.org/www/articles/sphereao/sphereao.htm
    % External References:
    % Samuli Laine's Recent Paper (Rasterization Method)
    % Stencil-based multi-resolution approach (GPU Pro)
    % Hybrid Baked Lighting (per 'Rendering with Conviction')
    % SSDO and indirect shadows
    % http://directtovideo.wordpress.com/2010/01/
    % Approximating Geometry with Discs (GPU Gems)
    % "Cascaded Light Propagation Volumes for Real-Time Indirect Illumination"
    %   ^-- Used by Crytek in actual games, but looks a bit complex.

	\recipe{DistanceGeneration}{Generating a two-dimensional SEDT}
	\recipe{GlyphAtlas}{Creating and using a texture atlas of SEDT glyphs}
	\recipe{DistanceEffects}{Antialiasing, outlining, glow, and drop shadows}

